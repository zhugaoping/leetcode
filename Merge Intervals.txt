/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
struct myclass{
    bool operator()(const Interval& a, const Interval& b) {
        return a.start < b.start;
    }
} myobj;
class Solution {
public:
    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        sort(intervals.begin(), intervals.end(), myobj);
        vector<Interval> ret;
        while (!intervals.empty()) {
            vector<Interval>::iterator it = intervals.begin();
            if (ret.empty() || ((*it).start > ret.back().end))
                ret.push_back(*it);    
            else
                ret.back().end = max(ret.back().end, (*it).end);
            intervals.erase(it);
        }
        return ret;
    }
};