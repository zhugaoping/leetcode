/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */

class Solution {
public:
    struct my{
        bool operator()(const Interval& a, const Interval& b) {
            return a.start < b.start;
        }
    } myo;
    vector<Interval> merge(vector<Interval> &intervals) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<Interval> r;
        vector<Interval>& s = intervals;
        if (s.size() == 0)
            return r;
        sort(s.begin(), s.end(), myo);
        r.push_back(s.front());
        s.erase(s.begin());
        while (s.size() > 0) {
            Interval& l = r.back();
            Interval& t = s.front();
            if (l.end < t.start) {
                r.push_back(t);
                s.erase(s.begin());
            }
            else {
                l.end = (l.end > t.end)?l.end:t.end;
                s.erase(s.begin());
            }
        }
        return r;

        
    }
};