class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > rets;
        vector<int> ret;
        sort(num.begin(), num.end());
        vector<bool> use(num.size(), false);
        solve(rets, ret, num, use, 0);
        return rets;
    }
    void solve(vector<vector<int>> &rs, vector<int> &r, vector<int> &n, vector<bool> &u, int p) {
        if (p == n.size())
            rs.push_back(r);
        else if (p < n.size()){
            int last = -1;
            for (int i = 0; i < n.size(); i++)
                if (!u[i] && ((last == -1) || (n[i] != n[last]))) {
                        r.push_back(n[i]);
                        u[i] = true;
                        solve(rs, r, n, u, p + 1);
                        u[i] = false;
                        r.pop_back();
                        last = i;
                }
        }
    }
};