class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > rets;
        if (num.size() == 0)
            return rets;
        sort(num.begin(), num.end());
        vector<int> use(num.size(), 0);
        vector<int> ret;
        plan(rets, ret, num, use, 0);
        return rets;
    }
    void plan(vector<vector<int> >& rs, vector<int>& r, vector<int>& n, vector<int>& u, int d) {
        if (d == n.size()) {
            rs.push_back(r);
            return;
        }
        int last = -1;
        for (int i = 0; i < n.size(); i++) {
            if (u[i])
                continue;
            else if ((last >= 0) && (n[last] == n[i]))
                continue;
            else {
                last = i;
                r.push_back(n[i]);
                u[i] = 1;
                plan(rs, r, n, u, d+1);
                u[i] = 0;
                r.pop_back();
            }
        }
    }
};