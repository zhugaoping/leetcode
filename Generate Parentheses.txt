struct entry{
        int l, r;
        string s;
        entry():l(0), r(0){}
        entry(const entry& e):l(e.l), r(e.r), s(e.s){}
};
class Solution {
public:
    vector<string> generateParenthesis(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<entry> *inner = new vector<entry>, *outer;
        inner->push_back(entry());
        for (int i = 0; i < 2*n; i++) {
            outer = new vector<entry>;
            while(!inner->empty()) {
                entry e = inner->back();
                inner->pop_back();
                if (e.l < n) {
                    outer->push_back(e);
                    outer->back().l++;
                    outer->back().s += '(';
                }
                if (e.l > e.r) {
                    outer->push_back(e);
                    outer->back().r++;
                    outer->back().s += ')';
                }
            }
            delete inner;
            inner = outer;
        }
        vector<string> rets;
        for (size_t i = 0; i < inner->size(); i++)
            rets.push_back((*inner)[i].s);
        delete inner;
        return rets;
    }
};