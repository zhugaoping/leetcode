class Solution {
public:
    string longestPalindrome(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (s.empty())
            return s;
        string t = "";
        for (int i = 0; i < s.size(); i++)
            t = t + '#' + s[i];
        t += '#';
        vector<int> p(t.size(), 0);
        int c = 0, r = 0;
        for (int i = 1; i < t.size() - 1; i++) {
            int mirror_i = 2*c - i;
            p[i] = (r > i)?min(r - i, p[mirror_i]):0;
            while ((i-p[i]-1 >= 0) && (i+p[i]+1 <= t.size() - 1) && (t[i+p[i]+1] == t[i-p[i]-1]))
                p[i]++;
            if (i + p[i] > r) {
                r = p[i] + i;
                c = i;
            }
        }
        int mav = 0, index = 0;
        for (int i = 1; i < t.size() - 1; i++) {
            if (p[i] > mav) {
                mav = p[i];
                index = i;
            }
        }
        return s.substr((index - mav)/2, mav);
    }
};