/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *last, *t1, *t2;
    void recoverTree(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        last = NULL, t1 = NULL;
        findFirst(root);
        last = NULL, t2 = NULL;
        findSecond(root);
        int temp = t1->val;
        t1->val = t2->val;
        t2->val = temp;
        
    }
    void findFirst(TreeNode* root) {
        if (root == NULL)
            return;
        findFirst(root->left);
        if (last != NULL)
            t1 = (root->val < last->val)?root:t1;
        last = root;
        findFirst(root->right);
    }
    void findSecond(TreeNode* root) {
        if (root == NULL)
            return;
        findSecond(root->right);
        if (last != NULL)
            t2 = (root->val > last->val)?root:t2;
        last = root;
        findSecond(root->left);
    }
};