class Solution {
public:
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > rets;
        vector<int> ret;
        sort(S.begin(), S.end());
        solve(rets, ret, S, 0);
        return rets;
    }
    void solve(vector<vector<int> > &rs, vector<int> &r, vector<int> &s, int p) {
        if (p == s.size()) {
            rs.push_back(r);
            return;
        }
        int n = p + 1;
        while ((n < s.size()) && (s[n] == s[p]))
            n++;
        solve(rs, r, s, n);
        for (int i = 1; i <= n - p; i++) {
            r.push_back(s[p]);
            solve(rs, r, s, n);
        }
        for (int i = 1; i <= n - p; i++)
            r.pop_back();
    }
};