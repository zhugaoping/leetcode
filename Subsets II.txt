class Solution {
public:
    vector<vector<int> > subsetsWithDup(vector<int> &S) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
     vector<vector<int> > rs;
        if (S.size() == 0)
            return rs;
        sort(S.begin(), S.end());
        vector<int> r;
        plan(S, 0, rs, r);
        return rs;
    }
    void plan(vector<int>& s, int d, vector<vector<int> >& rs, vector<int>& r) {
        if (d == s.size())
            rs.push_back(r);
        else {
            d++;
            if ((d == s.size()) || (s[d] != s[d-1])) {
                plan(s, d, rs, r);
                r.push_back(s[d-1]);
                plan(s, d, rs, r);
                r.pop_back();
            }
            else {
                int i = 1;
                while ((d != s.size()) && (s[d] == s[d-1])) {
                    i++;
                    d++;
                }
                for (int j = 0; j <= i; j++) {
                    for (int k = 0; k < j; k++)
                        r.push_back(s[d-1]);
                    plan(s, d, rs, r);a
                    for (int k = 0; k < j; k++)
                        r.pop_back();
                    
                }
            }
        }
    }
};