class Solution {
public:
    vector<vector<int> > combinationSum(vector<int> &candidates, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > rets;
        vector<int> ret;
        sort(candidates.begin(), candidates.end());
        plan(rets, ret, candidates, target, 0);
        return rets;
    }
    void plan(vector<vector<int> >& rs, vector<int> r, vector<int> & c, int target, int p) {
        if (target == 0) {
            rs.push_back(r);
            return;
        }
        if (p == c.size())
            return;
        plan(rs, r, c, target, p+1);
        int i = 1;
        for (; c[p]*i <= target; i++) {
            r.push_back(c[p]);
            plan(rs, r, c, target - c[p]*i, p+1);
        }
        i--;
        while(i--)
            r.pop_back();
    }
};