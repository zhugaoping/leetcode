class Solution {
public:
    double findMedianSortedArrays(int A[], int m, int B[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (m == 0)
            return (!(n%2))?(B[n/2-1]+B[n/2])/(double)2:(B[(n-1)/2]);
        if (n == 0)
            return (!(m%2))?(A[m/2-1]+A[m/2])/(double)2:(A[(m-1)/2]);
        if (!((m+n)%2))
            return (find(A, m, B, n, (m+n)/2) + find(A, m, B, n, (m+n)/2 + 1))/(double)2;
        else
            return find(A, m, B, n, (m+n+1)/2);
        
        
    }
    int find(int A[], int m, int B[], int n, int k) {
 
  int i = (int)((double)m / (m+n) * (k-1));
  int j = (k-1) - i;
 
  // invariant: i + j = k-1
  // Note: A[-1] = -INF and A[m] = +INF to maintain invariant
  int Ai_1 = ((i == 0) ? INT_MIN : A[i-1]);
  int Bj_1 = ((j == 0) ? INT_MIN : B[j-1]);
  int Ai   = ((i == m) ? INT_MAX : A[i]);
  int Bj   = ((j == n) ? INT_MAX : B[j]);
 
  if (Bj_1 <= Ai && Ai <= Bj)
    return Ai;
  else if (Ai_1 <= Bj && Bj <= Ai)
    return Bj;
 
 
  // if none of the cases above, then it is either:
  if (Ai < Bj)
    // exclude Ai and below portion
    // exclude Bj and above portion
    return find(A+i+1, m-i-1, B, j, k-i-1);
  else /* Bj < Ai */
    // exclude Ai and above portion
    // exclude Bj and below portion
    return find(A, i, B+j+1, n-j-1, k-j-1);
}
};