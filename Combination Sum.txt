class Solution {
public:
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > rets;
        vector<int> ret;
        sort(num.begin(), num.end());
        plan(rets, ret, num, target, 0);
        return rets;
    }
    void plan(vector<vector<int> >& rs, vector<int>& r, vector<int>& n, int target, int p) {
        if (target == 0) {
            rs.push_back(r);
            return;
        }
        if (p == n.size())
            return;
        int e = p + 1;
        while ((e < n.size()) && (n[p] == n[e]))
            e++;
        plan(rs, r, n, target, e);
        int i = 1;
        for (; (i <= e - p) && (i*n[p] <= target); i++) {
            r.push_back(n[p]);
            plan(rs, r, n, target - i*n[p], e);
        }
        i--;
        while (i--)
            r.pop_back();
    }
};