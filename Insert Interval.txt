/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<Interval> results;
        Interval n = newInterval;
        if (intervals.size() == 0) {
            results.push_back(newInterval);
            return results;
        }
        int p = 0;
        bool merge = false;
        while (p < intervals.size()) {
            Interval& c = intervals[p];
            if (n.start > c.end)
                results.push_back(c);
            else if (n.end < c.start) {
                break;
            }
            else {
                n.start = (n.start < c.start)?n.start:c.start;
                n.end = (n.end > c.end)?n.end:c.end;
            }
            p++;
        }
        results.push_back(n);
        while (p < intervals.size()) {
            results.push_back(intervals[p++]);
        }
        return results;
    }
};