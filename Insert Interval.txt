/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<Interval> rets;
        vector<Interval>::iterator it = intervals.begin();
        while (it != intervals.end()) {
            if ((*it).end < newInterval.start)
                rets.push_back(*it);
            else if ((*it).start > newInterval.end)
                break;
            else {
                newInterval.start = min(newInterval.start, (*it).start);
                newInterval.end = max(newInterval.end, (*it).end);
            }
            it++;
        }
        rets.push_back(newInterval);
        while (it != intervals.end())
            rets.push_back(*it++);
        return rets;
    }
};