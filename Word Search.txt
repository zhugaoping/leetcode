class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int nrows = board.size();
        if (!nrows)
            return false;
        int ncols = board[0].size();
        if (!ncols)
            return false;
        if (word.empty())
            return true;
        bool** use = new bool*[nrows];
        for (int i = 0; i < nrows; i++) {
            use[i] = new bool[ncols];
            memset(use[i], 0, sizeof(bool)*ncols);
        }
        for (int i = 0; i < nrows; i++)
            for (int j = 0; j < ncols; j++)
                if (solve(board, i, j, word, 0, use))
                    return true;
        return false;
    }
    bool solve(vector<vector<char> > &b, int x, int y, string& w, int p, bool** use) {
            if (p == w.size())
                return true;
            if ((x < 0) || (y < 0) || (x >= b.size()) || (y >= b[0].size()) || use[x][y]|| (w[p] != b[x][y]))
                return false;
            use[x][y] = true;
            if (solve(b, x-1, y, w, p+1, use)) {
                use[x][y] = false;
                return true;
            }
            if (solve(b, x, y-1, w, p+1, use)) {
                use[x][y] = false;
                return true;
            }
            if (solve(b, x+1, y, w, p+1, use)) {
                use[x][y] = false;
                return true;
            }
            if (solve(b, x, y+1, w, p+1, use)) {
                use[x][y] = false;
                return true;
            }
            use[x][y] = false;
            return false;
    }
};