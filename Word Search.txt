class Solution {
public:
    bool exist(vector<vector<char> > &board, string word) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int nrows = board.size();
        if (nrows == 0)
            return false;
        int ncols = board[0].size();
        if (ncols == 0)
            return false;
        if (word == "")
            return true;
        vector<vector<bool> > state;
        for (int i = 0; i < nrows; i++) {
            vector<bool> temp(ncols, 0);
            state.push_back(temp);
        }
        for (int i = 0; i < nrows; i++) {
            for (int j = 0; j < ncols; j++)
                if (traverse(state, word, 0, i, j, board))
                    return true;
        }
        return false;
    }
    bool traverse(vector<vector<bool> >& s, string& w, int p, int r, int c, vector<vector<char> > &b) {
        if ((w[p] != b[r][c]) || s[r][c])
            return false;
        else {
            if (p == w.size() - 1)
                return true;
            else {
                s[r][c] = true;
                if ((r > 0) && traverse(s, w, p+1, r-1, c, b))
                    return true;
                if ((c > 0) && traverse(s, w, p+1, r, c-1, b))
                    return true;
                if ((r < s.size() - 1) && traverse(s, w, p+1, r+1, c, b))
                    return true;
                if ((c < s[0].size() - 1) && traverse(s, w, p+1, r, c+1, b))
                    return true;
                s[r][c] = false;
            }
        }
        return false;
    }
};