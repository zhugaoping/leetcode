class Solution {
public:
    bool isValidSudoku(vector<vector<char> > &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = board.size();
        if (n == 0)
            return true;
        bool digit[10];
        for (int i = 0; i < n; i++) {
            memset(digit, 0x00, sizeof(bool)*(10));
            for (int j = 0; j < n; j++) {
                if (board[i][j] == '.')
                    continue;
                if (digit[board[i][j] - '0'])
                    return false;
                else
                    digit[board[i][j] - '0'] = true;
            }
        }
        for (int i = 0; i < n; i++) {
            memset(digit, 0x00, sizeof(bool)*(10));
             for (int j = 0; j < n; j++) {
                if (board[j][i] == '.')
                    continue;
                if (digit[board[j][i] - '0'])
                    return false;
                else
                    digit[board[j][i] - '0'] = true;
            }
        }
        for (int i = 0; i < n/3; i++) {
            for (int j = 0; j < n/3; j++) {
                int r = i*3, c = j*3;
                memset(digit, 0x00, sizeof(bool)*(10));
                for (int k = r; k < r + 3; k++) {
                    for (int l = c; l < c + 3; l++) {
                        if (board[k][l] == '.')
                            continue;
                        if (digit[board[k][l] - '0'])
                            return false;
                        else
                            digit[board[k][l] - '0'] = true;
                        
                    }
                }
            }
        }
        return true;
        
    }
};