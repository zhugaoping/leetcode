/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > rets;
        if (root == NULL)
            return rets;
        vector<TreeNode*> inner, outer;
        inner.push_back(root);
        while (!inner.empty()) {
            outer.clear();
            vector<int> ret;
            rets.push_back(ret);
            while (inner.size() > 0) {
                TreeNode* cur = *inner.begin();
                inner.erase(inner.begin());
                rets.back().push_back(cur->val);
                if (cur->left)
                    outer.push_back(cur->left);
                if (cur->right)
                    outer.push_back(cur->right);
            }
            inner = outer;
        }
        return rets;
    }
};