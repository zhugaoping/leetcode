class Solution {
public:
    vector<string> fullJustify(vector<string> &words, int L) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<string> rets;
        int p = 0, l = -1, len = 0, num = 0;
        while (p < words.size()) {
            l = (l == -1)?p:l;
            if (len + words[p].size() + num <= L) {
                len += words[p++].size();
                num++;  
            } else {
                string ret;
                if (num > 1) {
                    int snum = L - len, base = snum/(num-1), full = snum%(num-1);
                    for (int i = l; i < p - 1; i++)
                        ret += words[i]+((full-- > 0)?string(base+1, ' '):string(base, ' '));
                    ret += words[p-1];
                } else
                    ret = words[l] + string(L-words[l].size(), ' ');
                rets.push_back(ret);
                l = -1;
                len = 0;
                num = 0;
            }
        }
        if (l != -1) {
            string ret;
            for (int i = l; i < words.size(); i++)
                ret += (i == words.size()-1)?words[i]:words[i] + ' ';
            ret += string(L-ret.size(), ' ');
            rets.push_back(ret);
        }
        return rets;
    }
};