class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> ret;
        ret.push_back(-1);
        ret.push_back(-1);
        if (n == 0) 
            return ret;
        if (target < A[0])
            return ret;
        if (target > A[n-1])
            return ret;
        ret[0] = findHead(A, n, target);
        ret[1] = findTail(A, n, target);
        return ret;
        
    }
    int findHead(int A[], int n, int target) {
        int s = 0;
        int e = n - 1;
        while (s <= e) {
            int p = (s+e)/2;
            if (A[p] > target)
                e = p - 1;
            else if (A[p] < target)
                s = p + 1;
            else if ((p == 0) || (A[p-1] < A[p]))
                return p;
            else
                e = p - 1;
        }
        return -1;
    }
    int findTail(int A[], int n, int target) {
        int s = 0;
        int e = n - 1;
        while (s <= e) {
            int p = (s+e)/2;
            if (A[p] > target)
                e = p - 1;
            else if (A[p] < target)
                s = p + 1;
            else if ((p == n-1) || (A[p+1] > A[p]))
                return p;
            else
                s = p + 1;
        }
        return -1;
    }
};