class Solution {
public:
    vector<int> spiralOrder(vector<vector<int> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> rs;
        int size1 = matrix.size();
        if (size1 == 0)
            return rs;
        int size2 = matrix[0].size();
        if (size2 == 0)
            return rs;
        int min = (size1 < size2)?size1/2:size2/2;
        for (int i = 0; i < min; i++) {
            for (int j = i; j < size2 -1 - i; j++)
                rs.push_back(matrix[i][j]);
            for (int j = i; j < size1 -1 - i; j++)
                rs.push_back(matrix[j][size2 - 1 - i]);
            for (int j = size2 -1 - i; j > i; j--)
                rs.push_back(matrix[size1 -1 - i][j]);
            for (int j = size1 -1 - i; j > i; j--)
                rs.push_back(matrix[j][i]);
        }
        if ((size1 == size2) && (size1%2 != 0)) {
            rs.push_back(matrix[min][min]);
        }
        else if ((size1 < size2) && (size1%2 !=0)) {
            for (int i = min; i <= size2-1-min; i++)
                rs.push_back(matrix[min][i]);
        }
        else if ((size1 > size2) && (size2%2 !=0)) {
            for (int i = min; i <= size1-1-min; i++)
                rs.push_back(matrix[i][min]);
        }
        
        return rs;
        
    }
};