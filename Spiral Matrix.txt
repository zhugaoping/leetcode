class Solution {
public:
    vector<int> spiralOrder(vector<vector<int> > &matrix) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> rets;
        int row = matrix.size();
        if (row == 0)
            return rets;
        int col = matrix[0].size();
        if (col == 0)
            return rets;
        int round = (row < col)?row/2:col/2;
        for (int i = 0; i < round; i++) {
            for (int j = i; j < col - 1 - i; j++)
                rets.push_back(matrix[i][j]);
            for (int j = i; j < row - 1 - i; j++)
                rets.push_back(matrix[j][col - 1 - i]);
            for (int j = col - 1 - i; j > i; j--)
                rets.push_back(matrix[row - 1 - i][j]);
            for (int j = row - 1 - i; j > i; j--)
                rets.push_back(matrix[j][i]);
        }
        if ((row < col) && (row%2)) {
            for (int j = round; j <= col - 1 - round; j++)
                rets.push_back(matrix[round][j]);
        }
        else if ((row >= col) && (col%2)) {
            for (int j = round; j <= row - 1 - round; j++)
                rets.push_back(matrix[j][round]);
        }
        return rets; 
    }
};