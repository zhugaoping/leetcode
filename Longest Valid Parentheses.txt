class Solution {
public:
    int longestValidParentheses(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int size = s.size();
        if (size == 0)
            return 0;
        vector<pair<char, int> > b;
        vector<bool> use(size, false);
        for (int i = 0; i < size; i++) {
            if ((s[i] == ')') && !b.empty() && (b.back().first == '(')) {
                use[i] = true;
                use[b.back().second] = true;
                b.pop_back();
            }
            else
                b.push_back(pair<char, int>(s[i], i));
        }
        int p = 0, l = 0, mav = 0;
        while (p < size) {
            while ((p < size) && (use[p] == false))
                p++;
            l = p;
            while ((p < size) && (use[p] == true))
                p++;
            mav = max(mav, p - l); 
        }
        return mav;
    }
};