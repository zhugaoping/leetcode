class Solution {
public:
    int longestValidParentheses(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int p = 0, mav = 0, l = -1;
        vector<pair<char, int>> b;
        vector<bool> u(s.size(), false);
        while (p < s.size()) {
	    if (s[p] == '(')
		    b.push_back(pair<char, int>(s[p], p));
	    else if (!b.empty() && b.back().first == '(') {
                u[p] = true;
		u[b.back().second] = true;
		b.pop_back();
	    }
	    p++;
	}
	for (int i = 0; i < s.size(); i++) {
	    if (u[i]) {
		l = (l == -1)?i:l;
		mav = max(mav, i - l + 1);
	    } else
	    l = -1;
	}
	return mav;
    }
};