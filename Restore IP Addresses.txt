class Solution {
public:
    vector<string> restoreIpAddresses(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<string> rets;
        if ((s.size() >= 4) || (s.size() <= 12))
            plan(rets, "", s, 0, 0);
        return rets;
    }
    void plan(vector<string> &rs, string r, string& s, int p, int d) {
        if (d == 4) {
            if (p == s.size())
                rs.push_back(r.substr(0, r.size()-1));
        } else if (p < s.size()) {
            vector<string> opt = parse(s, p);
            for (int i = 0; i < opt.size(); i++)
                plan(rs, r + opt[i] + ".", s, p + opt[i].size(), d+1);
        }
    }
    vector<string> parse(string& s, int p) {
        vector<string> rets(1, s.substr(p, 1));
        if ((p + 1 < s.size()) && (s[p] != '0'))
            rets.push_back(s.substr(p, 2));
        if (p + 2 < s.size()) {
            int n = (s[p] - '0')*100 + (s[p+1] - '0')*10 + (s[p+2] - '0');
            if ((n >= 100) && (n <= 255))
                rets.push_back(s.substr(p, 3));
        }
        return rets;
    }
};