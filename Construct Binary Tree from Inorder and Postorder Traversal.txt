/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int p = postorder.size()-1;
        return build(postorder, p, inorder, 0, inorder.size() - 1);
    }
    TreeNode* build(vector<int>& po, int& p, vector<int>& io, int l, int u) {
        if (l > u)
            return NULL;
        int v = po[p--], i = l;
        TreeNode* root = new TreeNode(v);
        while (io[i] != v)
            i++;
        root->right = build(po, p, io, i+1, u);
        root->left = build(po, p, io, l, i-1);
        return root;
    }
};