/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (inorder.size() == 0)
            return NULL;
        else {
            int p = postorder.size() - 1;
            return build(inorder, 0, inorder.size() - 1, postorder, p);
        }
    }
    TreeNode* build(vector<int>& io, int s, int e, vector<int>& po, int& p) {
        if (s > e)
            return NULL;
        TreeNode* root = new TreeNode(po[p]);
        int i = s;
        for (; i <= e; i++) {
            if (io[i] == po[p])
                break;
        }
        p--;
        root->right = build(io, i+1, e, po, p);
        root->left = build(io, s, i-1, po, p);
    }
};