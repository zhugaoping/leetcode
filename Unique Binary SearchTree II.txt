/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> generateTrees(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<TreeNode*> results;
        if (n == 0) {
            results.push_back(NULL);
            return results;
        }
        int nums[n];
        for (int i = 0; i < n; i++)
            nums[i] = i+1;
        return generate(nums, 0, n-1);
    }
    vector<TreeNode*> generate(int* nums, int s, int e) {
        vector<TreeNode*> results;
        if (s > e) {
            results.push_back(NULL);
            return results;
        }
        for (int i = s; i <= e; i++) {
            vector<TreeNode*> l = generate(nums, s, i - 1);
            vector<TreeNode*> r = generate(nums, i + 1, e);
            for (int j = 0; j < l.size(); j++)
                for (int k = 0; k < r.size(); k++) {
                    TreeNode* root = new TreeNode(nums[i]);
                    results.push_back(root);
                    results.back()->left = l[j];
                    results.back()->right = r[k];
                }
        }
        return results;
    }
};