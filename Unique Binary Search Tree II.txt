/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> generateTrees(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return buildTrees(1, n);
    }
    vector<TreeNode*> buildTrees(int s, int e) {
        vector<TreeNode* > ret;
        if (s > e) {
            ret.push_back(NULL);
            return ret;
        }
        for (int i = s; i <= e; i++) {
            vector<TreeNode*> l = buildTrees(s, i-1);
            vector<TreeNode*> r = buildTrees(i+1, e);
            for (int k = 0; k < l.size(); k++)
                for (int j = 0; j < r.size(); j++) {
                    TreeNode* root = new TreeNode(i);
                    root->left = l[k];
                    root->right = r[j];
                    ret.push_back(root);
                }
        }
        return ret;
    }
};