/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> generateTrees(int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        return solve(1, n);
    }
    vector<TreeNode*> solve(int l, int u) {
        vector<TreeNode*> rets;
        if (l > u) 
            rets.push_back(NULL);
        else {
            for (int i = l; i <= u; i++) {
                vector<TreeNode*> lrets = solve(l, i-1);
                vector<TreeNode*> rrets = solve(i+1, u);
                for (int m = 0; m < lrets.size(); m++)
                    for (int n = 0; n < rrets.size(); n++) {
                        TreeNode* node = new TreeNode(i);
                        node->left = lrets[m];
                        node->right = rrets[n];
                        rets.push_back(node);
                    }
            }
        }
        return rets;
    }
};