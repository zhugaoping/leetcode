class Solution {
public:
    vector<vector<string>> partition(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<string>> rets;
        if (s.empty())
            return rets;
        string c = "#";
        for (int i = 0; i < s.size(); i++)
            c = c + s[i] + "#";
        vector<int> r(c.size(), 0);
        for (int i = 0; i < c.size(); i++) {
            int l = 1;
            while ((i-l >= 0) && (i+l < c.size()) && (c[i-l] == c[i+l]))
                l++;
            r[i] = l - 1;
        }
        vector<string> ret;
        plan(rets, ret, c, s, r, 1);
        return rets;
    }
    void plan(vector<vector<string>> &rs, vector<string> &r, string& c, string& s, vector<int> &d, int p) {
        if (p == c.size()) {
            rs.push_back(r);
            return;
        } else {
            for (int i = p; i < c.size() - 1; i++) {
                int rad = i - p + 1;
                if ((rad <= d[i]) && (i + rad < c.size())) {
                    r.push_back(s.substr((i - rad)/2, rad));
                    plan(rs, r, c, s, d, i + rad + 1);
                    r.pop_back();
                }
            }
        }
    }
};