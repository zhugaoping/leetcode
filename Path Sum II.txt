/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int>> rets;
        vector<int> ret;
        if (root)
            solve(rets, ret, root, sum);
        return rets;
    }
    void solve(vector<vector<int>> &rs, vector<int> &r, TreeNode* n, int rem) {
        if (!n->left && !n->right) {
            if (rem == n->val) {
                rs.push_back(r);
                rs.back().push_back(n->val);
            }
        } else {
            r.push_back(n->val);
            if (n->left)
                solve(rs, r, n->left, rem - n->val);
            if (n->right)
                solve(rs, r, n->right, rem - n->val);
            r.pop_back();
        }
    }
};